apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Values.beamline }}
  labels:
    app: {{ .Values.beamline }}
    beamline: {{ .Values.beamline }}
    ioc_version: {{ .Chart.AppVersion | quote }}
    is_ioc: "True"
  annotations:
    kubernetes.io/change-cause: {{ .Chart.AppVersion }} deployed
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .Values.beamline }}
  template:
    metadata:
      labels:
        app: {{ .Values.beamline }}
        beamline: {{ .Values.beamline }}
        ioc_version: {{ .Chart.AppVersion | quote }}
        is_ioc: "True"
    spec:
      {{ if .Values.serviceAccountName }}
      serviceAccountName: {{ .Values.serviceAccountName | quote }}
      {{- end }}
      hostNetwork: {{ .Values.hostNetwork }}
      terminationGracePeriodSeconds: 15 # nice to have quick restarts on IOCs
      volumes:
        {{- if .Values.opisClaim }}
        - name: opis-volume
          persistentVolumeClaim:
            claimName: {{ .Values.opisClaim }}
        {{- end }}
        {{- if .Values.nfsv2TftpClaim }}
        - name: nfsv2-tftp-volume
          persistentVolumeClaim:
            claimName: {{ .Values.nfsv2TftpClaim }}
        {{- end }}
        {{- if .Values.autosave }}
        - name: {{ .Values.beamline }}
          persistentVolumeClaim:
            claimName: {{ .Values.beamline }}
        {{- end }}
        {{- if .Values.dataVolume.pvc }}
        - name: {{ .Values.beamline }}-data
          persistentVolumeClaim:
            claimName: {{ .Values.beamline }}-data
        {{- else if .Values.dataVolume.hostPath }}
        - name: {{ .Values.beamline }}-data
          hostPath:
            path: {{ .Values.dataVolume.hostPath }}
            type: Directory
        {{- end }}
        - name: config-volume
          configMap:
            name: {{ .Values.beamline }}
      containers:
      - name: {{ .Values.beamline }}
        image: {{ .Values.image }}
        command:
          - bash
        args:
          - {{ .Values.start }}
        livenessProbe:
          exec:
            command:
            - /bin/bash
            - {{ .Values.liveness }}
          initialDelaySeconds: 120
          periodSeconds: 10
        lifecycle:
          preStop:
            exec:
              command: ["bash", "-c", "{{ .Values.stop }}"]
        volumeMounts:
        - name: config-volume
          mountPath: {{ .Values.iocConfig }}
        {{- if .Values.autosave }}
        - name: {{ .Values.beamline }}
          mountPath: /autosave
        {{- end }}
        {{- if or (.Values.dataVolume.pvc) (.Values.dataVolume.hostPath)  }}
        - name: {{ .Values.beamline }}-data
          mountPath: {{ .Values.dataVolume.hostPath }}
          {{- if .Values.dataVolume.hostPath }}
          mountPropagation: HostToContainer
          {{- end}}
        {{- end }}
        {{- if .Values.nfsv2TftpClaim }}
        - name: nfsv2-tftp-volume
          mountPath: /nfsv2-tftp
          subPath: "{{ .Values.beamline }}/{{ .Values.beamline }}"
          {{- end }}
        {{- if .Values.opisClaim }}
        - name: opis-volume
          mountPath: /epics/opis
          subPath: "{{ .Values.beamline }}"
          {{- end }}
        stdin: true
        tty: true
        securityContext:
{{  toYaml .Values.securityContext | indent 10}}
        resources:
{{  toYaml .Values.resources | indent 10}}
        imagePullPolicy: Always
        env:
        - name: IOCSH_PS1
          value: "{{ .Values.beamline }} > "
        - name: IOC_NAME
          value: {{ .Values.beamline }}
        - name: IOC_PREFIX
          value: {{ or .Values.prefix .Values.beamline | quote }}
        - name: IOC_VERSION
          value: {{ .Chart.AppVersion | quote }}
        {{- range $envVar := .Values.env }}
        - name: {{ $envVar.name }}
          value: {{ $envVar.value | quote }}
        {{- end }}
        {{- range $envVar := .Values.globalenv }}
        - name: {{ $envVar.name }}
          value: {{ $envVar.value | quote }}
        {{- end }}
      {{- if .Values.useAffinity }}
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: beamline
                operator: In
                values:
                  - {{ .Values.beamline }}
      {{- end }}
      tolerations:
        - key: nodetype
          operator: Equal
          value: {{ .Values.beamline }}
          effect: NoSchedule
